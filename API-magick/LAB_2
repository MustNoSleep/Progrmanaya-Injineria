import requests
import cv2
import numpy as np
import math
    
cities_dict = {
    "Уфа": "55.9678,54.7431",
    "Москва": "37.6156,55.7522",
    "Пермь": "56.2502,58.0105",
    "Липецк": "39.5708,52.6031",
}

api_server = "http://static-maps.yandex.ru/1.x/"

params = {
    "spn": "1,1",
    "l": "map",
    "size": "650,450",
    "z": "5",
}

def addmark(stadiums):
    results = []
    for stadium, coords in stadiums.items():
        results.append(coords)
    return results

def haversine(lon1, lat1, lon2, lat2):
    R = 6371.0  # Радиус Земли в километрах

    lat1_rad = math.radians(lat1)
    lon1_rad = math.radians(lon1)
    lat2_rad = math.radians(lat2)
    lon2_rad = math.radians(lon2)

    dlat = lat2_rad - lat1_rad
    dlon = lon2_rad - lon1_rad

    # Формула гаверсинусов
    a = math.sin(dlat / 2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon / 2)**2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))

    distance = R * c
    return distance

def calculate_route_length(cities):
    total_length = 0.0
    city_coords = list(cities.values())

    for i in range(len(city_coords) - 1):
        lat1_str, lon1_str = city_coords[i].split(',')
        lat1 = float(lat1_str)
        lon1 = float(lon1_str)

        lat2_str, lon2_str = city_coords[i + 1].split(',')
        lat2 = float(lat2_str)
        lon2 = float(lon2_str)

        total_length += haversine(lat1, lon1, lat2, lon2)

    return total_length

def find_midpoint_on_route(cities):
    total_length = calculate_route_length(cities)
    half_length = total_length / 2.0

    current_length = 0.0
    previous_lat_lon = None

    for city_name, coord in cities.items():
        if previous_lat_lon is not None:
            lat_str, lon_str = coord.split(',')
            lat = float(lat_str)
            lon = float(lon_str)

            segment_length = haversine(previous_lat_lon[0], previous_lat_lon[1], lat, lon)

            if (current_length + segment_length) >= half_length:
                dif = half_length - (current_length + segment_length)
                
                fraction = abs(dif) / segment_length
                
                # Интерполяция
                mid_lat = previous_lat_lon[0] + fraction * (lat - previous_lat_lon[0])
                mid_lon = previous_lat_lon[1] + fraction * (lon - previous_lat_lon[1])
                
                return f"{mid_lat:.4f},{mid_lon:.4f}"
            
            current_length += segment_length
        
        previous_lat_lon = (float(coord.split(',')[0]), float(coord.split(',')[1]))

midpoint_coords = find_midpoint_on_route(cities_dict)
marks = addmark(cities_dict)
params["pt"] = midpoint_coords
params["pl"] = ",".join(marks)


response = requests.get(api_server, params=params)

if response.status_code == 200:
    image_array = np.asarray(bytearray(response.content), dtype=np.uint8)

    image = cv2.imdecode(image_array, cv2.IMREAD_COLOR)

    cv2.imshow('Map', image)
    cv2.waitKey(0)
else:
    print("Ошибка при загрузке изображения:", response.status_code)
